#!/usr/bin/env lua

local function cat_command(command)
    local f = io.popen(command, 'r')
    if f then
        return true, f:read('*l')
    else
        return false
    end
end

local function cat_file(filename, amount)
    amount = amount or '*l'
    local f = io.open(filename)
    if f then
        return true, f:read(amount)
    else
        return false
    end

    return contents
end

local function cat_wireless_proc()
    local fake = [[
Inter-| sta-|   Quality        |   Discarded packets               | Missed | WE
 face | tus | link level noise |  nwid  crypt   frag  retry   misc | beacon | 22
 wlan0: 0000   63.  -47.  -256        0      0      0      0     18        0
]]
    --return cat_file('/proc/net/wireless', '*a')
    return fake
end

local function cat_battery_proc(filename)
    local battery_path = '/sys/bus/acpi/drivers/battery/PNP0C0A:00/power_supply/BAT0/'
    return cat_file(battery_path .. filename)
end

local _, status = cat_battery_proc('status')

local result, rate_now = cat_battery_proc('power_now')
if not result then
    result, rate_now = cat_battery_proc('current_now')
    assert(result, 'failed to get current rate')
end

local result, capacity_now = cat_battery_proc('energy_now')
if not result then
    result, capacity_now = cat_battery_proc('charge_now')
    assert(result, 'failed to get current capacity')
end

local result, capacity_full = cat_battery_proc('energy_full')
if not result then
    result, capacity_full = cat_battery_proc('charge_full')
    assert(result, 'failed to get total capacity')
end

local states = {}

function states.Common(left_brace, hours_remaining, right_brace)
    local seconds_remaining = 3600 * hours_remaining
    local epoch_now = os.time()
    local epoch_end = epoch_now + seconds_remaining
    local time_end = os.date('%H:%M', epoch_end)
    return left_brace .. time_end .. right_brace
end

function states.Charging()
    local hours_remaining = (capacity_full - capacity_now) / rate_now
    return states.Common('[', hours_remaining, ']')
end

function states.Discharging()
    local hours_remaining = capacity_now / rate_now
    return states.Common('{', hours_remaining, '}')
end

function states.Full()
    return ''
end

function wireless_strength()
    local contents = cat_wireless_proc()
    contents = contents:match('.*wlan%d*: *%d* *(%d*)')
end

function pandora()
  local have_artist, artist = cat_file('/tmp/pandora-song-artist', '*l')
  local have_title, title = cat_file('/tmp/pandora-song-title', '*l')
  local have_song_status, song_status = cat_file('/tmp/pandora-song-status', '*l')
  local result = ''

  if have_artist and have_title then
    result = artist .. ', ' .. title
  else
    result = ''
  end

  if have_song_status and #song_status > 0 then
    result = result .. ' ' .. song_status
  end

  return result
end

--wireless_strength()
local p = pandora()
if #p > 0 then
  p = p .. ' '
end

local success, uptime = cat_command("uptime | sed -e 's/.*average://'| tr ',' ' ' | awk '{print $1}'")
if not success then
    uptime = ''
end

print(p .. uptime .. ' - ' .. (states[status] or function() return '' end)())
